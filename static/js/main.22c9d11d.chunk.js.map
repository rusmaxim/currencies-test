{"version":3,"sources":["features/currencies/currencyTypes.service.ts","features/currencies/currencyRates.service.ts","features/currencies/CurrencyList.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["CurrencyTypesCodes","currencyRates","map","id","dateString","value","moment","getCurrencyRates","date","a","filterCurrencyRatesByDate","rates","reduce","arr","currencyRate","isAfter","latestRate","find","rate","isSameOrBefore","filter","currencyTypes","1","EUR","2","GBP","3","RUR","prepareRows","currency","format","DateEditor","onValueChange","DatePicker","onChange","animateYearScrolling","CurrencyList","useState","setRates","name","title","columns","filters","setFilters","columnName","filteringEnabled","filteringStateColumnExtensions","dateColumns","dateFilterOperations","currencyColumns","currencyFilterOperations","useEffect","invalidateFlag","filterDate","filterCurrency","undefined","rows","currenciesFilters","split","some","indexOf","fetchRates","Paper","for","availableFilterOperations","editorComponent","onFiltersChange","columnExtensions","defaultSorting","direction","showSortingControls","showFilterSelector","App","utils","MomentUtils","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.22c9d11d.chunk.js","sourcesContent":["export enum CurrencyTypesCodes {\n    EUR = \"EUR\",\n    GBP = \"GBP\",\n    RUR = \"RUR\",\n}\n\nexport type CurrencyTypes = {\n    [key: number]: CurrencyTypesCodes\n}\n\nconst currencyTypes:CurrencyTypes = {\n    1 : CurrencyTypesCodes.EUR,\n    2 : CurrencyTypesCodes.GBP,\n    3 : CurrencyTypesCodes.RUR,\n}\n\nexport function getCurrencyTypes() {\n    return currencyTypes\n}\n","import moment from \"moment\"\n\ntype CurrencyRateInput = [number, string, number]\nexport type CurrencyRate = [number, moment.Moment, number]\n\nconst inputCurrencyRates: CurrencyRateInput[] = [\n    [1, \"02.07.2021\", 1.2312],\n    [1, \"05.07.2021\", 1.2307],\n    [1, \"06.07.2021\", 1.2411],\n    [1, \"07.07.2021\", 1.2417],\n    [1, \"08.07.2021\", 1.2421],\n    [1, \"09.07.2021\", 1.2291],\n    [1, \"12.07.2021\", 1.2302],\n    [1, \"13.07.2021\", 1.2378],\n    [1, \"14.07.2021\", 1.2369],\n    [2, \"02.07.2021\", 1.378415],\n    [2, \"05.07.2021\", 1.381722],\n    [2, \"06.07.2021\", 1.391914],\n    [2, \"07.07.2021\", 1.387173],\n    [2, \"08.07.2021\", 1.388364],\n    [2, \"09.07.2021\", 1.382674],\n    [2, \"12.07.2021\", 1.388644],\n    [2, \"13.07.2021\", 1.396277],\n    [2, \"14.07.2021\", 1.395577],\n    [3, \"02.07.2021\", 0.01772],\n    [3, \"05.07.2021\", 0.017649],\n    [3, \"06.07.2021\", 0.017513],\n    [3, \"07.07.2021\", 0.017698],\n    [3, \"08.07.2021\", 0.017605],\n    [3, \"13.07.2021\", 0.017664],\n    [3, \"14.07.2021\", 0.017564],\n]\n\nconst currencyRates = inputCurrencyRates.map<CurrencyRate>(([id, dateString, value]) => ([id, moment(dateString, \"DD.MM.YYYY\"), value]))\n\nexport async function getCurrencyRates(date: moment.Moment) {\n    return filterCurrencyRatesByDate(date ? date : moment(), currencyRates)\n}\n\n// TODO: Good candidate for unit test.\nasync function filterCurrencyRatesByDate(date: moment.Moment, rates: CurrencyRate[]) {\n    return rates.reduce<CurrencyRate[]>((arr, currencyRate) => {\n        if (currencyRate[1].isAfter(date)) {\n            return arr\n        }\n\n        const latestRate = arr.find(rate => rate[0] === currencyRate[0])\n        if (!latestRate) {\n            return [...arr, currencyRate]\n        }\n\n        if (currencyRate[1].isSameOrBefore(latestRate[1])) {\n            return arr\n        }\n\n        return [...arr.filter(rate => rate[0] !== currencyRate[0]), currencyRate]\n    }, [])\n}","import { FC, useEffect, useState } from \"react\";\nimport Paper from '@material-ui/core/Paper';\nimport {\n  Grid,\n  Table,\n  TableHeaderRow,\n  TableFilterRow,\n} from '@devexpress/dx-react-grid-material-ui';\n\nimport {\n    DataTypeProvider,\n    FilteringState,\n    IntegratedSorting,\n    SortingState,\n} from \"@devexpress/dx-react-grid\";\n\n\nimport { CurrencyRate, getCurrencyRates } from \"./currencyRates.service\";\nimport { CurrencyTypesCodes, getCurrencyTypes } from \"./currencyTypes.service\";\nimport { DatePicker } from \"@material-ui/pickers\";\n\nconst currencyTypes = getCurrencyTypes();\n\ntype CurrencyListRow = {\n    currency: CurrencyTypesCodes\n    rate: number\n    date: string\n}\n\nconst prepareRows = (currencyRate: CurrencyRate[]) => {\n    return currencyRate.map(rate => ({\n        currency: currencyTypes[rate[0]],\n        rate: rate[2],\n        date: rate[1].format(\"DD.MM.YYYY\"),\n    }))\n}\n\nconst DateEditor: React.ComponentType<DataTypeProvider.ValueEditorProps> = ({value, onValueChange}) => {\n    const handleChange = (value: any) => {\n        onValueChange(value);\n    };\n    return <DatePicker\n        value={value}\n        onChange={handleChange}\n        animateYearScrolling\n    />;\n}\n\nexport const CurrencyList: FC = () => {\n    const [rates, setRates] = useState<CurrencyListRow[]>([]);\n\n    const [columns] = useState([\n        { name: 'currency', title: 'Currency' },\n        { name: 'rate', title: 'Rate' },\n        { name: 'date', title: 'Date' },\n    ]);\n\n    const [filters, setFilters] = useState<any[]>([])\n\n    const [filteringStateColumnExtensions] = useState([\n        { columnName: 'rate', filteringEnabled: false },\n      ]);\n\n    const [dateColumns] = useState(['date']);\n    const [dateFilterOperations] = useState(['date']);\n\n\n    const [currencyColumns] = useState(['currency']);\n    const [currencyFilterOperations] = useState(['contains']);\n\n    useEffect(() => {\n        let invalidateFlag = false;\n        async function fetchRates() {\n            if (invalidateFlag) return;\n\n            const filterDate = filters.find(({columnName}) => columnName === 'date')\n            const filterCurrency = filters.find(({columnName}) => columnName === 'currency')\n\n            const currencyRates = await getCurrencyRates(filterDate ? filterDate.value : undefined);\n\n            const rows = prepareRows(currencyRates)\n            if (filterCurrency) {\n                const currenciesFilters = filterCurrency.value.split(\" \");\n                return setRates(rows.filter((rate) =>\n                    currenciesFilters.some((filter: any) => filter && rate.currency.indexOf(filter) > -1))\n                )\n            }\n            setRates(rows);\n        }\n        fetchRates()\n\n        return () => {\n            invalidateFlag = true\n        }\n    }, [filters])\n\n    return <Paper>\n        <Grid\n            rows={rates}\n            columns={columns}\n        >\n            <DataTypeProvider\n                for={dateColumns}\n                availableFilterOperations={dateFilterOperations}\n                editorComponent={DateEditor}\n            />\n             <DataTypeProvider\n                for={currencyColumns}\n                availableFilterOperations={currencyFilterOperations}\n            />\n            <FilteringState\n                filters={filters}\n                onFiltersChange={setFilters}\n                columnExtensions={filteringStateColumnExtensions}\n            />\n            <SortingState\n                defaultSorting={[{ columnName: 'currency', direction: 'asc' }]}\n            />\n            <IntegratedSorting />\n            <Table />\n            <TableHeaderRow showSortingControls />\n            <TableFilterRow\n                showFilterSelector\n            />\n        </Grid>\n    </Paper>\n}\n","import React from 'react';\nimport { MuiPickersUtilsProvider } from '@material-ui/pickers';\nimport MomentUtils from '@date-io/moment'\n\nimport './App.css';\nimport { CurrencyList } from './features/currencies/CurrencyList';\n\nfunction App() {\n  return (\n    <MuiPickersUtilsProvider utils={MomentUtils}>\n        <CurrencyList></CurrencyList>\n    </MuiPickersUtilsProvider>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}